% Ultralytics ðŸš€ AGPL-3.0 License - https://ultralytics.com/license

function [input, flags] = fcnDefinePixels(input,flags,handles)
if ~flags.update.detectorgeometry;  return;  end
fprintf('Defining Detector Geometry... '); tic
cylinder = false;
Lr = input.cube.Lr;
flags.status.lappd = false;

input.cube.MCPplacement = 'even'; %'tiled' or 'even'  %even = evenly spread out

try
    hg = evalin('base','handles');
    if ischecked(hg.GUI.ShapeCube);         input.cube.shape = 'cube';
    elseif ischecked(hg.GUI.ShapeCylinder); input.cube.shape = 'cylinder';
    end
catch
    input.cube.shape = 'cube';
end
input.cube.maxtiles = 5; %how many Planacons to tile

active = find(flags.status.plotside); %active = [5 6];


% if isfield(input.cube,'activefaces');
%     active = input.cube.activefaces;
% else
%     %active = [ 5 6];
%     %active = [1   3   5 6];
%     active = [1 2 3 4 5 6];
% end

input.cube.centernormal = [-1 0 0           %plane1-front
    0 -1 0              %plane2-right
    1 0 0               %plane3-back
    0 1 0               %plane4-left
    0 0 1               %plane5-top
    0 0 -1];            %plane6-bottom
input.cube.facelh = [Lr(2:3); Lr([1 3]); Lr(2:3); Lr([1 3]); Lr([2 1]); Lr([2 1])];
input.cube.facecenter = [Lr(1) 0 0; 0 Lr(2) 0; -Lr(1) 0 0;0 -Lr(2) 0; 0 0 -Lr(3); 0 0 Lr(3)];
input.cube.area.perface = [Lr(2)*Lr(3), Lr(1)*Lr(3), Lr(2)*Lr(3), Lr(1)*Lr(3), Lr(2)*Lr(1), Lr(2)*Lr(1)]*4/1E6;


ASIC='DRS4';
switch ASIC
    case 'IRSD'
        dsp.dynamicrange = [-1 1]*1.5; %(V)
        dsp.rate = 1/0.359; %GSPS
        dsp.samples = 256;
        dsp.bits = 12;
        dsp.noise = .013; %.0023 (V)
    case 'IRSDnoamps'
        dsp.dynamicrange = [-1 1]*1; %(V)
        dsp.rate = 1/0.359; %GSPS
        dsp.samples = 256;
        dsp.bits = 12;
        dsp.noise = .002; %.0023 (V)
    case 'PSEC4'
        dsp.dynamicrange = [-1 1]*1.1; %(V)
        dsp.rate = 10; %GSPS
        dsp.samples = 256;
        dsp.bits = 10;
        dsp.noise = .001; %.00411 (V) 1sigma
    case 'DRS4'
        dsp.dynamicrange = [-1 1]*0.5; %(V)
        dsp.rate = 5; %GSPS
        dsp.samples = 1024;
        dsp.bits = 13;
        dsp.noise = .0005; %0.5mV (V) 1sigma
end
dsp.dt = 1 / dsp.rate; %(ns) dt between samples
dsp.t = (0:(dsp.samples-1))*dsp.dt;

[pmt.transit, pmt.amplitude, pmt.waveform] = transitAmplitudePlanacon(dsp);
pmt.openarea = 0.80; %from XP85012 datasheet
pmt.darkCountRate = 0.046; % (kHz/mm^2), 125kHz/Planacon @ 1E5 gain, 125,000 = 2E-9/1E5/1.6E-19

switch input.cube.MCPname
   case {'SENSL_J60035_5V.mat','SENSL_J60035_2p5V.mat'}
        input.cube.pixelsize = [6.07, 6.07]; %(mm) [length, height]
        input.cube.footprint = [6.33, 6.33]; %[6.13, 6.13];
        np = 8;  nr = [1 1];  shift = 6.13*4; %(mm) tileshift
        input.cube.MCPplacement = 'tiled';
        P = fcngridanodeMCP(input,np,nr,shift);
        [pmt.transit, pmt.amplitude, pmt.waveform] = transitAmplitudeSENSLJ(dsp);  pmt.openarea=1;  pmt.darkCountRate=80; %(80 kHz/mm^2)
    case {'PLANACON_XP85012-A1.mat'}
        input.cube.pixelsize = [5.9, 5.9]; %(mm) [length, height]
        input.cube.footprint = [6.5, 6.5];
        np = 8;  nr = [2 2];  shift = 30.0; %(mm) tileshift
        input.cube.MCPplacement = 'tiled';
        P = fcngridanodeMCP(input,np,nr,shift);
    case {'HAMAMATSU_8500C-03.mat','HAMAMATSU_8500C.mat'}
        input.cube.pixelsize = [6.1483, 6.1483]; %(mm) [length, height]
        input.cube.footprint = [6.1484, 6.1484];
        np = 8;  nr = [2 2];  shift = 26.0; %(mm) tileshift
        input.cube.MCPplacement = 'tiled';
        P = fcngridanodeMCP(input,np,nr,shift);
    case {'LAPPD.20cm.mat','LAPPD.80cm.mat'}
        switch input.cube.MCPname
            case 'LAPPD.20cm.mat'
                %input.cube.footprint = [229, 220]; %footprint from Incom CAD
                input.cube.pixelsize = [203, 180]; %(mm) [200 200] or [800 200] [length, height] LAPPD
                input.cube.footprint = [204, 181];
            case 'LAPPD.80cm.mat'
                input.cube.pixelsize = [803, 180]; %(mm)
                input.cube.footprint = [804, 181];
        end

        %http://psec.uchicago.edu/library/doclib/documents/214/
        [pmt.transit, pmt.amplitude, pmt.waveform] = transitAmplitudeLAPPD();

        pmt.strips = 26; %lappd only!
        pmt.stripwidth = 5.1308; %(mm) 5.1308        
        pmt.stripdx = 6.9088; %(mm) 6.9088
        pmt.stripx = midspace(-13,13,pmt.strips)*pmt.stripdx; %(mm) %2HV strips nonusable on ends
        pmt.pdfacross = 2; %(mm) 1sigma charge cloud shape across strips
        pmt.spr = .74953; %(ns) sigma single photon response cfit c1/sqrt(2)!
        pmt.openarea = .60; %fraction of of open pores on face, Incom CAD drawing
        pmt.darkCountRate = 0.001; %(kHz/mm^2) 40kHz/tile
        ov=ones(pmt.strips,1);  a=[-input.cube.pixelsize(1)/2*ov, pmt.stripx', ov*0];  pmt.stripends=[a; [-a(:,1) a(:,2:3)]];  
        pmt.leftside=[true(pmt.strips,1); false(pmt.strips,1)];
        
        flags.status.lappd = true;
    otherwise %manual
        activearea = sum(input.cube.area.perface(active)); %(m^2) #ok<*UNRCH>
        cf = input.cube.coverageFraction;
        input.cube.pixelsize = sqrt(cf*activearea*1E6/input.cube.requestedpixels) * [1 1];
        input.cube.footprint = input.cube.pixelsize/sqrt(cf); %mm per side
end


switch input.cube.shape
    case {'rectangle','cube'}
        input.cube.shapeID = 2;
        switch input.cube.MCPname
            case {'manual','LAPPD.20cm.mat','LAPPD.80cm.mat'}
                [P,Q] = fcnmanualMCP(input,pmt);
        end
    case 'cylinder'
        input.cube.shapeID = 3;
        [P, input] = fcncylinder(input); %define pixel centers
        cylinder = true;
end
input.cube.pixelarea = prod(input.cube.pixelsize);

%DEFINE ZEROSDATA ---------------------------------------------------------
zv = zeros(1,6); pixelsperface=zv;
for i = active
    pixelsperface(i) = numel(P{i})/3;
end
input.cube.startidx = cumsum([1 pixelsperface]);

if ~cylinder
    input.cube.volume = prod(input.cube.Lr*2/1000); %(m^3) define volume
    [box.x, box.y, box.z] = cube(Lr,[0 0 0]);
else %cylinder
    r = input.cube.radius;
    h = input.cube.height;
    az = linspace(-180,180,100)'*d2r;
    top = fcnSC2CC([r*ones(100,1) zeros(100,1) az]);  top(:,3)=-h/2;
    
    a = [1 1 nan];  az = ([0*a 90*a 180*a 270*a]-45)'*d2r;
    sides = fcnSC2CC([r*ones(12,1) zeros(12,1) az]);  sides(1:2:end,3) = -h/2;  sides(2:2:end,3) = h/2;  sides(3:3:end,3)=nan;
    
    box.x = [sides(:,1); top(:,1); nan; -top(:,1)];
    box.y = [sides(:,2); top(:,2); nan; -top(:,2)];
    box.z = [sides(:,3); top(:,3); nan; -top(:,3)];
end
input.cube.box = box;

input.cube.area.all = sum(input.cube.area.perface);
input.cube.pixelsperface = pixelsperface;
input.cube.pixels = sum(input.cube.pixelsperface);
input.cube.coverageFractionAcheived = (input.cube.pixels*input.cube.pixelarea/1E6)/input.cube.area.all;

n=input.cube.pixels;   a=[];
a.xyz = zeros(n,3);    a.fi=uint8(zeros(n,1));  %face index (1-6)
for i = active
    j = (1:pixelsperface(i))+sum(pixelsperface(1:(i-1))); %indexes into the x y z vectors
    a.xyz(j,:) = P{i};
    a.fi(j) = i;
end
a.knnxyz = createns(a.xyz,'nsmethod','kdtree');
a.normalVec = pixel2normal(a.xyz(:,1),a.xyz(:,2),a.xyz(:,3),Lr,cylinder);
input.cube.activefaces = active;

b=a.xyz; %opposite face corresponding pixels
i=a.fi==1 | a.fi==3;   b(i,1)=-b(i,1); %front+back
i=a.fi==2 | a.fi==4;   b(i,2)=-b(i,2); %sides
i=a.fi==5 | a.fi==6;   b(i,3)=-b(i,3); %top+bottom
[i, r] = knnsearch(a.knnxyz,b);  i(r>0 | rangec(a.xyz)==0)=nan;  a.opposingPixel=i;



if flags.status.lappd
    b=cat(1,Q{active,1});  a.xyzLAPPD=b;  %b=input.cube.all.xyzLAPPD; for i=1:numel(b)/3; text(b(i,1),b(i,2),b(i,3),sprintf('%3g',i)); end
    a.fiLAPPD=cat(1,Q{active,2});  %face index
    a.leftsideLAPPD=cat(1,Q{active,3});

    knnxyzLAPPD = createns(b,'nsmethod','kdtree');  %opposite face corresponding pixels
    i=a.fiLAPPD==1 | a.fiLAPPD==3;   b(i,1)=-b(i,1); %front+back
    i=a.fiLAPPD==2 | a.fiLAPPD==4;   b(i,2)=-b(i,2); %sides
    i=a.fiLAPPD==5 | a.fiLAPPD==6;   b(i,3)=-b(i,3); %top+bottom
    [i, r] = knnsearch(knnxyzLAPPD,b);  i(r>0 | rangec(a.xyzLAPPD)==0)=nan;  a.opposingPixelLAPPD=i;
    
    s=pmt.strips; np=input.cube.pixels;
    a.matchedPixelLAPPD = fcncol( [(1:s)+s, 1:s]'*ones(1,np) + (0:(np-1))*s*2 ); %pixel on other end of strip
end
 
[a.v.x, a.v.y, a.v.z] = pixel2vertices(a.xyz(:,1),a.xyz(:,2),a.xyz(:,3),a.normalVec,input.cube.pixelsize);
input.cube.all=a;



%VOLUMES ------------------------------------------------------------------
flags.status.fibers=false;
if ischecked(handles.GUI.FiberFlag)
    A.L = [2.5 2.5 Lr(3)]; %(mm) SQUARE FIBERS
    A.fn = floor([Lr(1)/A.L(1), Lr(2)/A.L(2)]);
    A.vx=midspace(-1,1,A.fn(1))*A.fn(1)*A.L(1);  A.vy=midspace(-1,1,A.fn(2))*A.fn(2)*A.L(2);
    
    A.mcx=linspace(-1,1,150)*input.cube.pixelsize(1)/2;  %SENSL J60035 150^2 microcells/SiPM
    A.mcy=linspace(-1,1,150)*input.cube.pixelsize(2)/2;
    A.mcn=[150 150];
    
    [x,y,z] = ndgrid(A.vx,A.vy,0);  n=numel(x);  j=1:n;    A.xyz = [x(:) y(:) z(:)];
    if n>1E5;  fprintf('WARNING, TOO MANY FIBERS CREATED IN fcnDefinePixels.m\n');  j=1:1E5;  end
    A.knnxyz = createns(A.xyz(j,1:2),'nsmethod','kdtree','BucketSize',15);
    input.Volume(1)=A;    flags.status.fibers=true;
end

mass = input.cube.volume;
if mass<1;          str = sprintf('%.0fL',mass*1000);
elseif mass<1000;   str = sprintf('%.0fT',mass);
else                str = sprintf('%.0fkT',mass/1000); 
end
input.cube.prettyvolume = str;


%DEFINE TIME-CORRELATED PIXEL V NOISE -------------------------------------
B = 1.5*dsp.dt; %autocorrelation time constant
if flags.status.lappd
    noise = randncorr([pmt.strips*2*input.cube.pixels  dsp.samples], B/dsp.dt)*dsp.noise;
    dsp.N = reshape(noise',[dsp.samples pmt.strips 2 input.cube.pixels]);
else
    noise = randncorr([input.cube.pixels  dsp.samples], B/dsp.dt)*dsp.noise;
    dsp.N = reshape(noise',[dsp.samples input.cube.pixels]);
end
dsp.N=single(dsp.N);

input.cube.dsp = dsp;
input.cube.pmt = pmt;
fprintf('Done (%.1fs).\n',toc)
end


function [P, Q] = fcnmanualMCP(input,pmt)
tol = 1E-10;

P=cell(1,6); Q=cell(6,3);
for i=1:6
    normal = input.cube.centernormal(i,:);
    lh = input.cube.facelh(i,:);
    n = floor(lh*2./input.cube.footprint + tol);
    switch input.cube.MCPplacement
        case 'tiled'
            n=min(n,input.cube.maxtiles);
            vy = midspace(-1,1,n(1)) * n(1)*input.cube.footprint(1)/2; %monotonically spaced from center
            vz = midspace(-1,1,n(2)) * n(2)*input.cube.footprint(2)/2; %monotonically spaced from center
        otherwise %evenly spread out
            vy = midspace(-1,1,n(1)) * lh(1); %evenly spaced
            vz = midspace(-1,1,n(2)) * lh(2); %evenly spaced
    end
    [yc,zc,xc] = meshgrid(vy,vz,0); %local
    P{i} = fcnface2world(-normal,input.cube.facecenter(i,:),xc,yc,zc);
    
    
    if regexpi(input.cube.prettyname,'LAPPD')
        m=prod(n); c=cell(m,1);  if m==0; continue; end
        for j=1:m
            c{j}=pmt.stripends + [xc(j) yc(j) zc(j)];
        end
        c=cell2mat(c);
        Q{i,1}=fcnface2world(-normal,input.cube.facecenter(i,:),c(:,3),c(:,1),c(:,2));
        Q{i,2}=ones(numel(c)/3,1)*i; %face index
        Q{i,3}=repmat(pmt.leftside,[m 1]);
    end
end

end


function P = fcngridanodeMCP(input,np,nr,shift)
xv = input.cube.footprint(1)*((1:np) - np/2 - .5); %pixel vector

P=cell(1,6);
for i=1:6
    lh = input.cube.facelh(i,:);
    switch input.cube.MCPplacement
        case 'tiled'
            sx = linspace(-shift*(nr(1)-1), shift*(nr(1)-1), nr(1)); %MCP vector
            sy = linspace(-shift*(nr(2)-1), shift*(nr(2)-1), nr(2)); %MCP vector
        otherwise %evenly spread out
            sx = midspace(-1,1,nr(1)) * lh(1); %evenly spaced
            sy = midspace(-1,1,nr(2)) * lh(2); %evenly spaced
    end
    
    [X,Y] = meshgrid(xv,xv);
    [S,T] = meshgrid(sx,sy); %
    X = X(:)+S(:)';  Y = Y(:)+T(:)';
    Z=Y;  Y=-X;  X=Z*0;
    P{i} = fcnface2world(input.cube.centernormal(i,:),input.cube.facecenter(i,:),X(:),Y(:),Z(:));
end
end

function xyz = fcnface2world(normal,facecenter,xc,yc,zc)
C = fcnVEC2DCM_W2B(normal);
b = [xc(:) yc(:) zc(:)]*C;
xyz = b+facecenter;
end


%THESE FUNCTIONS ARE SOLID ------------------------------------------------
%THESE FUNCTIONS ARE SOLID ------------------------------------------------
function nv = pixel2normal(x,y,z,Lr,cylinder)
if nargin==4; cylinder=false; end
n = numel(x);  nv = zeros(n,3);  tol=1E-9;

i=abs(abs(z)-Lr(3))<tol;  nv(i,3) = -z(i); %top+bottom
if cylinder
    i=~i;  nv(i,1:2) = [-x(i) -y(i)]; %four sides
else
    i=abs(abs(x)-Lr(1))<tol;  nv(i,1) = -x(i); %front+back
    i=abs(abs(y)-Lr(2))<tol;  nv(i,2) = -y(i); %left+right
end
nv = fcnvec2uvec(nv);
end

function [xv,yv,zv] = pixel2vertices(x,y,z,normal,pixelsize)
n = numel(x);
cv = [-.5 .5]; %centers vector
[Y, Z] = meshgrid(cv*pixelsize(1),cv*pixelsize(2));  Y=Y(:); Z=Z(:); X=zeros(size(Y)); %side = [pixellength pixelheight]

zv=zeros(n,1); zw=zeros(1,4);
rpy=fcnVEC2RPY(normal);
X = zv+X';  roll  = rpy(:,1)+zw;
Y = zv+Y';  pitch = rpy(:,2)+zw;
Z = zv+Z';  yaw   = rpy(:,3)+zw;
xm=rotateW2Bc([roll(:),pitch(:),yaw(:)],[X(:)  Y(:)  Z(:)]);

xv=reshape(xm(:,1),[n 4]) + x;  xv=xv(:,[1 3 4 2]);
yv=reshape(xm(:,2),[n 4]) + y;  yv=yv(:,[1 3 4 2]);
zv=reshape(xm(:,3),[n 4]) + z;  zv=zv(:,[1 3 4 2]);
end


function [transit, amplitude, waveform] = transitAmplitudeSENSLJ(dsp)
%TTS
mu = .120*3; %(ns)
s = .120*1; %(ns)
a=[]; a.x=linspace(0,mu+s*4,1000);  a.pdf=pdf('norm',a.x,mu,s);  a.c=prepareRCDF(a.x,cumsum(a.pdf));  a.mu=sum(a.x.*a.pdf)/sum(a.pdf);  transit=a; %a.mu=weighted mean

%AMPLITUDE
mu = 0.000167; %(V) was .010 or 0.0004
s = mu/10; %(V) amplitude distribution sigma
a=[]; a.x=linspace(0,mu+s*4,1000);  a.pdf=pdf('norm',a.x,mu,s);  a.c=prepareRCDF(a.x,cumsum(a.pdf));  a.mu=sum(a.x.*a.pdf)/sum(a.pdf);  amplitude=a; %a.mu=weighted mean

%WAVEFORM
x = -.2:.2:(98.1*2); 
y = [ 0, 0, 0.9909, 2.955, 7.911, 14.62, 20.85, 26.02, 30.83, 34.81, 37.12, 38.04, 38.02, 37.45, 36.33, 34.59, 32.16, 29.21, 26.07, 23.08, 20.56, 18.61, 17.01, 15.47, 13.73, 11.68, 9.531, 7.574, 6.088, 5.156, 4.533, 3.992, 3.488, 3.025, 2.604, 2.227, 1.895, 1.6, 1.339, 1.105, 0.8927, 0.6977, 0.519, 0.3563, 0.2093, 0.07802, -0.03804, -0.1397, -0.2279, -0.3038, -0.3681, -0.422, -0.4663, -0.5022, -0.5305, -0.5523, -0.5684, -0.58, -0.5879, -0.5932, -0.5968, -0.5998, -0.6029, -0.6063, -0.61, -0.6141, -0.6184, -0.6229, -0.6276, -0.6326, -0.6376, -0.6428, -0.648, -0.6533, -0.6587, -0.664, -0.6694, -0.6746, -0.6798, -0.6849, -0.6898, -0.6946, -0.6991, -0.7035, -0.7076, -0.7115, -0.7152, -0.7187, -0.7221, -0.7252, -0.7282, -0.7311, -0.7338, -0.7364, -0.7388, -0.7412, -0.7434, -0.7456, -0.7477, -0.7497, -0.7517, -0.7536, -0.7555, -0.7573, -0.7592, -0.761, -0.7629, -0.7647, -0.7666, -0.7685, -0.7704, -0.7723, -0.7742, -0.7761, -0.778, -0.7799, -0.7817, -0.7835, -0.7852, -0.787, -0.7886, -0.7902, -0.7917, -0.7932, -0.7946, -0.7959, -0.7971, -0.7982, -0.7992, -0.8002, -0.8011, -0.8019, -0.8026, -0.8032, -0.8038, -0.8043, -0.8047, -0.8051, -0.8054, -0.8057, -0.8059, -0.806, -0.8061, -0.8061, -0.8061, -0.8061, -0.806, -0.8058, -0.8056, -0.8054, -0.8052, -0.8049, -0.8046, -0.8043, -0.8039, -0.8035, -0.8031, -0.8027, -0.8022, -0.8018, -0.8013, -0.8009, -0.8004, -0.7999, -0.7994, -0.7989, -0.7985, -0.798, -0.7975, -0.7971, -0.7966, -0.7962, -0.7958, -0.7954, -0.795, -0.7947, -0.7943, -0.794, -0.7937, -0.7934, -0.7932, -0.7929, -0.7927, -0.7925, -0.7923, -0.7921, -0.792, -0.7918, -0.7917, -0.7916, -0.7915, -0.7914, -0.7913, -0.7912, -0.7912, -0.7912, -0.7911, -0.7911, -0.7911, -0.7911, -0.7912, -0.7912, -0.7912, -0.7913, -0.7913, -0.7914, -0.7915, -0.7916, -0.7917, -0.7918, -0.7919, -0.792, -0.7921, -0.7923, -0.7924, -0.7925, -0.7927, -0.7928, -0.793, -0.7932, -0.7933, -0.7935, -0.7937, -0.7938, -0.794, -0.7942, -0.7944, -0.7945, -0.7947, -0.7949, -0.7951, -0.7953, -0.7954, -0.7956, -0.7958, -0.796, -0.7962, -0.7963, -0.7965, -0.7967, -0.7968, -0.797, -0.7972, -0.7973, -0.7975, -0.7976, -0.7978, -0.7979, -0.7981, -0.7982, -0.7983, -0.7985, -0.7986, -0.7987, -0.7988, -0.7989, -0.799, -0.7991, -0.7992, -0.7993, -0.7994, -0.7995, -0.7995, -0.7996, -0.7997, -0.7997, -0.7998, -0.7998, -0.7998, -0.7998, -0.7998, -0.7998, -0.7998, -0.7998, -0.7998, -0.7998, -0.7997, -0.7997, -0.7996, -0.7995, -0.7994, -0.7994, -0.7993, -0.7991, -0.799, -0.7989, -0.7987, -0.7986, -0.7984, -0.7982, -0.798, -0.7978, -0.7976, -0.7974, -0.7972, -0.7969, -0.7966, -0.7964, -0.7961, -0.7958, -0.7954, -0.7951, -0.7948, -0.7944, -0.794, -0.7936, -0.7932, -0.7928, -0.7924, -0.7919, -0.7915, -0.791, -0.7905, -0.79, -0.7895, -0.789, -0.7885, -0.7879, -0.7874, -0.7868, -0.7862, -0.7856, -0.785, -0.7844, -0.7838, -0.7831, -0.7825, -0.7818, -0.7811, -0.7804, -0.7797, -0.779, -0.7783, -0.7775, -0.7768, -0.776, -0.7752, -0.7744, -0.7736, -0.7728, -0.772, -0.7712, -0.7703, -0.7695, -0.7686, -0.7677, -0.7668, -0.7659, -0.765, -0.7641, -0.7632, -0.7622, -0.7613, -0.7603, -0.7594, -0.7584, -0.7574, -0.7564, -0.7554, -0.7543, -0.7533, -0.7522, -0.7512, -0.7501, -0.7491, -0.748, -0.7469, -0.7458, -0.7447, -0.7435, -0.7424, -0.7413, -0.7401, -0.739, -0.7378, -0.7366, -0.7354, -0.7342, -0.733, -0.7318, -0.7306, -0.7294, -0.7281, -0.7269, -0.7256, -0.7243, -0.7231, -0.7218, -0.7205, -0.7192, -0.7179, -0.7166, -0.7153, -0.714, -0.7127, -0.7114, -0.71, -0.7087, -0.7073, -0.706, -0.7046, -0.7033, -0.7019, -0.7006, -0.6992, -0.6978, -0.6965, -0.6951, -0.6937, -0.6923, -0.6909, -0.6895, -0.6882, -0.6868, -0.6854, -0.684, -0.6826, -0.6812, -0.6798, -0.6784, -0.677, -0.6756, -0.6742, -0.6728, -0.6714, -0.67, -0.6687, -0.6673, -0.6659, -0.6645, -0.6631, -0.6617, -0.6603, -0.659, -0.6576, -0.6562, -0.6548, -0.6535, -0.6521, -0.6508, -0.6494, -0.648, -0.6467, -0.6454, -0.644, -0.6427, -0.6414, -0.64, -0.6387, -0.6374, -0.6361, -0.6348, -0.6335, -0.6322, -0.631, -0.6297, -0.6284, -0.6272, -0.6259, -0.6247, -0.6234, -0.6222, -0.6209, -0.6197, -0.6185, -0.6173, -0.6161, -0.6148, -0.6136, -0.6124, -0.6113, -0.6101, -0.6089, -0.6077, -0.6065, -0.6054, -0.6042, -0.6031, -0.6019, -0.6008, -0.5996, -0.5985, -0.5974, -0.5962, -0.5951, -0.594, -0.5929, -0.5918, -0.5907, -0.5896, -0.5885, -0.5874, -0.5863, -0.5852, -0.5842, -0.5831, -0.582, -0.581, -0.5799, -0.5789, -0.5778, -0.5768, -0.5757, -0.5747, -0.5737, -0.5726, -0.5716, -0.5706, -0.5696, -0.5686, -0.5676, -0.5666, -0.5656, -0.5646, -0.5636, -0.5626, -0.5616, -0.5606, -0.5597, -0.5587, -0.5577, -0.5568, -0.5558, -0.5549, -0.5539, -0.553, -0.552, -0.5511, -0.5501, -0.5492, -0.5483, -0.5473, -0.5464, -0.5455, -0.5446, -0.5437, -0.5427, -0.5418, -0.5409, -0.54, -0.5391, -0.5382, -0.5373, -0.5365, -0.5356, -0.5347, -0.5338, -0.5329, -0.5321, -0.5312, -0.5303, -0.5294, -0.5286, -0.5277, -0.5269, -0.526, -0.5252, -0.5243, -0.5235, -0.5226, -0.5218, -0.5209, -0.5201, -0.5193, -0.5184, -0.5176, -0.5168, -0.5159, -0.5151, -0.5143, -0.5135, -0.5127, -0.5118, -0.511, -0.5102, -0.5094, -0.5086, -0.5078, -0.507, -0.5062, -0.5054, -0.5046, -0.5038, -0.503, -0.5022, -0.5014, -0.5006, -0.4999, -0.4991, -0.4983, -0.4975, -0.4967, -0.4959, -0.4952, -0.4944, -0.4936, -0.4928, -0.4921, -0.4913, -0.4905, -0.4898, -0.489, -0.4882, -0.4875, -0.4867, -0.4859, -0.4852, -0.4844, -0.4837, -0.4829, -0.4822, -0.4814, -0.4806, -0.4799, -0.4791, -0.4784, -0.4776, -0.4769, -0.4761, -0.4754, -0.4746, -0.4739, -0.4731, -0.4724, -0.4716, -0.4709, -0.4702, -0.4694, -0.4687, -0.4679, -0.4672, -0.4664, -0.4657, -0.4649, -0.4642, -0.4635, -0.4627, -0.462, -0.4612, -0.4605, -0.4597, -0.459, -0.4583, -0.4575, -0.4568, -0.456, -0.4553, -0.4545, -0.4538, -0.4531, -0.4523, -0.4516, -0.4508, -0.4501, -0.4493, -0.4486, -0.4478, -0.4471, -0.4464, -0.4456, -0.4449, -0.4441, -0.4434, -0.4426, -0.4419, -0.4411, -0.4404, -0.4396, -0.4389, -0.4381, -0.4373, -0.4366, -0.4358, -0.4351, -0.4343, -0.4335, -0.4328, -0.432, -0.4313, -0.4305, -0.4297, -0.429, -0.4282, -0.4274, -0.4267, -0.4259, -0.4251, -0.4243, -0.4236, -0.4228, -0.422, -0.4212, -0.4204, -0.4196, -0.4189, -0.4181, -0.4173, -0.4165, -0.4157, -0.4149, -0.4141, -0.4133, -0.4125, -0.4117, -0.4109, -0.4101, -0.4093, -0.4085, -0.4077, -0.4069, -0.406, -0.4052, -0.4044, -0.4036, -0.4027, -0.4019, -0.4011, -0.4003, -0.3994, -0.3986, -0.3977, -0.3969, -0.3961, -0.3952, -0.3944, -0.3935, -0.3927, -0.3918, -0.3909, -0.3901, -0.3892, -0.3883, -0.3875, -0.3866, -0.3857, -0.3848, -0.384, -0.3831, -0.3822, -0.3813, -0.3804, -0.3795, -0.3786, -0.3777, -0.3768, -0.3759, -0.375, -0.374, -0.3731, -0.3722, -0.3713, -0.3703, -0.3694, -0.3685, -0.3675, -0.3666, -0.3656, -0.3647, -0.3637, -0.3628, -0.3618, -0.3609, -0.3599, -0.3589, -0.3579, -0.357, -0.356, -0.355, -0.354, -0.353, -0.352, -0.351, -0.35, -0.349, -0.3479, -0.3469, -0.3459, -0.3449, -0.3438, -0.3428, -0.3418, -0.3407, -0.3397, -0.3386, -0.3376, -0.3365, -0.3354, -0.3343, -0.3333, -0.3322, -0.3311, -0.33, -0.3289, -0.3278, -0.3267, -0.3256, -0.3245, -0.3234, -0.3222, -0.3211, -0.32, -0.3188, -0.3177, -0.3165, -0.3154, -0.3142, -0.3131, -0.3119, -0.3107, -0.3095, -0.3084, -0.3072, -0.306, -0.3048, -0.3036, -0.3024, -0.3011, -0.2999, -0.2987, -0.2975, -0.2962, -0.295, -0.2937, -0.2925, -0.2912, -0.2899, -0.2887, -0.2874, -0.2861, -0.2848, -0.2835, -0.2822, -0.2809, -0.2796, -0.2783, -0.277, -0.2756, -0.2743, -0.2729, -0.2716, -0.2702, -0.2689, -0.2675, -0.2661, -0.2648, -0.2634, -0.262, -0.2606, -0.2592, -0.2578, -0.2563, -0.2549, -0.2535, -0.252, -0.2506, -0.2492, -0.2477, -0.2462, -0.2448, -0.2433, -0.2418, -0.2403, -0.2388, -0.2373, -0.2358, -0.2343, -0.2327, -0.2312, -0.2297, -0.2281, -0.2266, -0.225, -0.2234, -0.2219, -0.2203, -0.2187, -0.2171, -0.2155, -0.2139, -0.2123, -0.2106, -0.209, -0.2074, -0.2057, -0.2041, -0.2024, -0.2007, -0.199, -0.1974, -0.1957, -0.194, -0.1923, -0.1905, -0.1888, -0.1871, -0.1853, -0.1836, -0.1818, -0.1801, -0.1783, -0.1765, -0.1747, -0.1729, -0.1711, -0.1693, -0.1675, -0.1657, -0.1638, -0.162, -0.1601, -0.1583, -0.1564, -0.1545, -0.1526, -0.1507, -0.1488, -0.1469, -0.145, -0.1431, -0.1411, -0.1392, -0.1372, -0.1353, -0.1333, -0.1313, -0.1293, -0.1273, -0.1253, -0.1233, -0.1213, -0.1193, -0.1172, -0.1152, -0.1131, -0.111, -0.1089, -0.1069, -0.1048, -0.1027, -0.1005, -0.09841, -0.09628, -0.09414, -0.09198, -0.08982, -0.08765, -0.08547, -0.08328, -0.08108, -0.07887, -0.07665, -0.07442, -0.07218, -0.06994, -0.06768, -0.06541, -0.06314, -0.06085, -0.05855, -0.05625, -0.05393, -0.05161, -0.04927, -0.04693, -0.04457, -0.0422, -0.03983, -0.03744, -0.03505, -0.03264, -0.03023, -0.0278, -0.02536, -0.02292, -0.02046, -0.01799, -0.01552, -0.01303, -0.01053, -0.008022, -0.005503, -0.002973, -0.0004332];
y=y/max(y(:));  waveform.x=x; waveform.y=y;
end


function [transit, amplitude, waveform] = transitAmplitudePlanacon(dsp)
%TTS
mu = .060*3; %(ns)
s = .060*1; %(ns)
a=[]; a.x=linspace(0,mu+s*4,1000);  a.pdf=pdf('norm',a.x,mu,s);  a.c=prepareRCDF(a.x,cumsum(a.pdf));  a.mu=sum(a.x.*a.pdf)/sum(a.pdf);  transit=a; %a.mu=weighted mean

%AMPLITUDE
% mu =  1; %(V)
% s = 1; %(V) amplitude distribution sigma
% a=[]; a.x=linspace(0,mu+s*4,1000);  a.pdf=pdf('norm',a.x,mu,s);  
a=load('MTCamplitudes.mat'); a.x=a.x/1000;
a.c=prepareRCDF(a.x,cumsum(a.pdf));  a.mu=sum(a.x.*a.pdf)/sum(a.pdf);  amplitude=a; %a.mu=weighted mean

%WAVEFORM
x = 0:255; 
%tau=6.532;  omega=0.325;  %IRSB 6 ns FWHM, dt=359 ps
%tau=18.23;  omega=.1165;  %IRSB 6 ns FWHM, dt=1 sample, FIT EQN: gain*exp((-1/tau)*(x-xo)).*sin(omega*(x-xo))
tau=14.8;  omega=.1064;  %IRSB 6 ns FWHM, dt=1 sample, FIT EQN: gain*exp((-1/tau)*(x-xo)).*sin(omega*(x-xo))
%tau=18.23/2;  omega=.1165*2;  %SENSL J SIPM APPROXIMATION, 3 ns FWHM
y = exp((-1/tau)*x).*sin(omega*x); %template y = A*exp(-a*t)*cos(w*t+ph) - B*exp(-alpha*t);

%y = -.015 + [0.00307, 0.00302, 0.00374, 0.00413, 0.00518, 0.00557, 0.00586, 0.00672, 0.00808, 0.00831, 0.00924, 0.00887, 0.00947, 0.00909, 0.00935, 0.00946, 0.00976, 0.00909, 0.00781, 0.00812, 0.00815, 0.00848, 0.009, 0.00895, 0.01, 0.0101, 0.01, 0.0103, 0.0114, 0.0122, 0.0116, 0.0124, 0.0134, 0.0123, 0.0127, 0.0132, 0.0132, 0.0143, 0.0121, 0.0131, 0.0133, 0.0138, 0.014, 0.0132, 0.013, 0.0133, 0.0134, 0.0143, 0.0144, 0.0137, 0.0138, 0.0133, 0.0137, 0.0146, 0.0135, 0.0142, 0.0129, 0.012, 0.0127, 0.0139, 0.014, 0.0139, 0.0142, 0.015, 0.0148, 0.0145, 0.0149, 0.016, 0.0156, 0.0157, 0.0175, 0.0172, 0.0177, 0.0183, 0.0183, 0.0188, 0.0201, 0.0215, 0.021, 0.0228, 0.021, 0.0223, 0.023, 0.0245, 0.0245, 0.0242, 0.0233, 0.0236, 0.0231, 0.0242, 0.0223, 0.0234, 0.0233, 0.0238, 0.0234, 0.0223, 0.0225, 0.0213, 0.0195, 0.0207, 0.02, 0.0212, 0.02, 0.0203, 0.0203, 0.0186, 0.0188, 0.0195, 0.0202, 0.0221, 0.0225, 0.0225, 0.0249, 0.0341, 0.0416, 0.0619, 0.0928, 0.152, 0.228, 0.346, 0.464, 0.601, 0.712, 0.814, 0.873, 0.93, 0.957, 1.0, 0.965, 0.937, 0.902, 0.853, 0.797, 0.729, 0.66, 0.585, 0.513, 0.437, 0.367, 0.296, 0.237, 0.176, 0.122, 0.0679, 0.0212, -0.031, -0.0732, -0.112, -0.141, -0.168, -0.186, -0.201, -0.212, -0.217, -0.22, -0.213, -0.207, -0.197, -0.187, -0.172, -0.16, -0.139, -0.123, -0.101, -0.0847, -0.0655, -0.0516, -0.0346, -0.0215, -0.00632, 0.00206, 0.0131, 0.0227, 0.0296, 0.0347, 0.0411, 0.0453, 0.0503, 0.051, 0.0526, 0.0545, 0.0533, 0.0517, 0.0512, 0.0481, 0.0444, 0.0424, 0.0406, 0.0346, 0.0297, 0.0264, 0.0222, 0.0184, 0.0138, 0.00897, 0.00694, 0.00411, 0.00159, -5.95e-4, -0.00205, -0.00499, -0.00569, -0.00766, -0.00834, -0.00983, -0.0103, -0.0117, -0.0115, -0.0107, -0.00866, -0.00782, -0.00586, -0.00637, -0.00608, -0.00623, -0.00375, -0.00323, -0.0033, -0.00278, -0.00186, -6.92e-4, 3.53e-4, 5.94e-4, 0.00164, 0.00333, 0.00515, 0.00451, 0.00597, 0.00682, 0.00819, 0.00734, 0.00703, 0.00707, 0.00902, 0.0093, 0.00999, 0.00973, 0.0114, 0.0123, 0.0125, 0.0149, 0.0179, 0.02, 0.0201, 0.0221, 0.0242, 0.0263, 0.0305, 0.0325, 0.0334, 0.0353, 0.0361, 0.0363, 0.0364, 0.0356, 0.0352];
y(x<0)=0;  y=y/max(y(:));  waveform.x=x*dsp.dt; waveform.y=y;
end


function [transit, amplitude, waveform] = transitAmplitudeLAPPD()
%TTS
mu = .060*3; %(ns)
s = .060; %(ns)
a.x = linspace(0,mu+s*4,1000);  a.pdf=pdf('norm',a.x,mu,s);  a.c=prepareRCDF(a.x,cumsum(a.pdf));  a.mu=sum(a.x.*a.pdf)/sum(a.pdf);  transit = a; %a.mu=weighted mean

%AMPLITUDE
mu =  0.010; %0.435; %(V)
s = 0.008; %0.18; %(V) amplitude distribution sigma
a=[]; a.x=linspace(0,mu+s*4,1000);  a.pdf=pdf('norm',a.x,mu,s);  a.c=prepareRCDF(a.x,cumsum(a.pdf));  a.mu=sum(a.x.*a.pdf)/sum(a.pdf);  amplitude=a; %a.mu=weighted mean

%WAVEFORM
%x = linspace(min(x(:)),max(x(:)),3000); %template x (ns)
%y = exp(x.^2 * (-.5/s^2)); %template y
waveform.x = [ -34.7, -34.6, -34.5, -34.4, -34.3, -34.2, -34.1, -34.0, -33.9, -33.8, -33.7, -33.6, -33.5, -33.4, -33.3, -33.2, -33.1, -33.0, -32.9, -32.8, -32.7, -32.6, -32.5, -32.4, -32.3, -32.2, -32.1, -32.0, -31.9, -31.8, -31.7, -31.6, -31.5, -31.4, -31.3, -31.2, -31.1, -31.0, -30.9, -30.8, -30.7, -30.6, -30.5, -30.4, -30.3, -30.2, -30.1, -30.0, -29.9, -29.8, -29.7, -29.6, -29.5, -29.4, -29.3, -29.2, -29.1, -29.0, -28.9, -28.8, -28.7, -28.6, -28.5, -28.4, -28.3, -28.2, -28.1, -28.0, -27.9, -27.8, -27.7, -27.6, -27.5, -27.4, -27.3, -27.2, -27.1, -27.0, -26.9, -26.8, -26.7, -26.6, -26.5, -26.4, -26.3, -26.2, -26.1, -26.0, -25.9, -25.8, -25.7, -25.6, -25.5, -25.4, -25.3, -25.2, -25.1, -25.0, -24.9, -24.8, -24.7, -24.6, -24.5, -24.4, -24.3, -24.2, -24.1, -24.0, -23.9, -23.8, -23.7, -23.6, -23.5, -23.4, -23.3, -23.2, -23.1, -23.0, -22.9, -22.8, -22.7, -22.6, -22.5, -22.4, -22.3, -22.2, -22.1, -22.0, -21.9, -21.8, -21.7, -21.6, -21.5, -21.4, -21.3, -21.2, -21.1, -21.0, -20.9, -20.8, -20.7, -20.6, -20.5, -20.4, -20.3, -20.2, -20.1, -20.0, -19.9, -19.8, -19.7, -19.6, -19.5, -19.4, -19.3, -19.2, -19.1, -19.0, -18.9, -18.8, -18.7, -18.6, -18.5, -18.4, -18.3, -18.2, -18.1, -18.0, -17.9, -17.8, -17.7, -17.6, -17.5, -17.4, -17.3, -17.2, -17.1, -17.0, -16.9, -16.8, -16.7, -16.6, -16.5, -16.4, -16.3, -16.2, -16.1, -16.0, -15.9, -15.8, -15.7, -15.6, -15.5, -15.4, -15.3, -15.2, -15.1, -15.0, -14.9, -14.8, -14.7, -14.6, -14.5, -14.4, -14.3, -14.2, -14.1, -14.0, -13.9, -13.8, -13.7, -13.6, -13.5, -13.4, -13.3, -13.2, -13.1, -13.0, -12.9, -12.8, -12.7, -12.6, -12.5, -12.4, -12.3, -12.2, -12.1, -12.0, -11.9, -11.8, -11.7, -11.6, -11.5, -11.4, -11.3, -11.2, -11.1, -11.0, -10.9, -10.8, -10.7, -10.6, -10.5, -10.4, -10.3, -10.2, -10.1, -10.0, -9.9, -9.8, -9.7, -9.6, -9.5, -9.4, -9.3, -9.2, -9.1, -9.0, -8.9, -8.8, -8.7, -8.6, -8.5, -8.4, -8.3, -8.2, -8.1, -8.0, -7.9, -7.8, -7.7, -7.6, -7.5, -7.4, -7.3, -7.2, -7.1, -7.0, -6.9, -6.8, -6.7, -6.6, -6.5, -6.4, -6.3, -6.2, -6.1, -6.0, -5.9, -5.8, -5.7, -5.6, -5.5, -5.4, -5.3, -5.2, -5.1, -5.0, -4.9, -4.8, -4.7, -4.6, -4.5, -4.4, -4.3, -4.2, -4.1, -4.0, -3.9, -3.8, -3.7, -3.6, -3.5, -3.4, -3.3, -3.2, -3.1, -3.0, -2.9, -2.8, -2.7, -2.6, -2.5, -2.4, -2.3, -2.2, -2.1, -2.0, -1.9, -1.8, -1.7, -1.6, -1.5, -1.4, -1.3, -1.2, -1.1, -1.0, -0.9, -0.8, -0.7, -0.6, -0.5, -0.4, -0.3, -0.2, -0.1, 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 6.0, 6.1, 6.2, 6.3, 6.4, 6.5, 6.6, 6.7, 6.8, 6.9, 7.0, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7, 7.8, 7.9, 8.0, 8.1, 8.2, 8.3, 8.4, 8.5, 8.6, 8.7, 8.8, 8.9, 9.0, 9.1, 9.2, 9.3, 9.4, 9.5, 9.6, 9.7, 9.8, 9.9, 10.0, 10.1, 10.2, 10.3, 10.4, 10.5, 10.6, 10.7, 10.8, 10.9, 11.0, 11.1, 11.2, 11.3, 11.4, 11.5, 11.6, 11.7, 11.8, 11.9, 12.0, 12.1, 12.2, 12.3, 12.4, 12.5, 12.6, 12.7, 12.8, 12.9, 13.0, 13.1, 13.2, 13.3, 13.4, 13.5, 13.6, 13.7, 13.8, 13.9, 14.0, 14.1, 14.2, 14.3, 14.4, 14.5, 14.6, 14.7, 14.8, 14.9, 15.0, 15.1, 15.2, 15.3, 15.4, 15.5, 15.6, 15.7, 15.8, 15.9, 16.0, 16.1, 16.2, 16.3, 16.4, 16.5, 16.6, 16.7, 16.8, 16.9, 17.0, 17.1, 17.2, 17.3, 17.4, 17.5, 17.6, 17.7, 17.8, 17.9, 18.0, 18.1, 18.2, 18.3, 18.4, 18.5, 18.6, 18.7, 18.8, 18.9, 19.0, 19.1, 19.2, 19.3, 19.4, 19.5, 19.6, 19.7, 19.8, 19.9, 20.0, 20.1, 20.2, 20.3, 20.4, 20.5, 20.6, 20.7, 20.8, 20.9, 21.0, 21.1, 21.2, 21.3, 21.4, 21.5, 21.6, 21.7, 21.8, 21.9, 22.0, 22.1, 22.2, 22.3, 22.4, 22.5, 22.6, 22.7, 22.8, 22.9, 23.0, 23.1, 23.2, 23.3, 23.4, 23.5, 23.6, 23.7, 23.8, 23.9, 24.0, 24.1, 24.2, 24.3, 24.4, 24.5, 24.6, 24.7, 24.8, 24.9, 25.0, 25.1, 25.2, 25.3, 25.4, 25.5, 25.6, 25.7, 25.8, 25.9, 26.0, 26.1, 26.2, 26.3, 26.4, 26.5, 26.6, 26.7, 26.8, 26.9, 27.0, 27.1, 27.2, 27.3, 27.4, 27.5, 27.6, 27.7, 27.8, 27.9, 28.0, 28.1, 28.2, 28.3, 28.4, 28.5, 28.6, 28.7, 28.8, 28.9, 29.0, 29.1, 29.2, 29.3, 29.4, 29.5, 29.6, 29.7, 29.8, 29.9, 30.0, 30.1, 30.2, 30.3, 30.4, 30.5, 30.6, 30.7, 30.8, 30.9, 31.0, 31.1, 31.2, 31.3, 31.4, 31.5, 31.6, 31.7, 31.8, 31.9, 32.0, 32.1, 32.2, 32.3, 32.4, 32.5, 32.6, 32.7, 32.8, 32.9, 33.0, 33.1, 33.2, 33.3, 33.4, 33.5, 33.6, 33.7, 33.8, 33.9, 34.0, 34.1, 34.2, 34.3, 34.4, 34.5, 34.6, 34.7, 34.8, 34.9, 35.0, 35.1, 35.2, 35.3, 35.4, 35.5, 35.6, 35.7, 35.8, 35.9, 36.0, 36.1, 36.2, 36.3, 36.4, 36.5, 36.6, 36.7, 36.8, 36.9, 37.0, 37.1, 37.2, 37.3, 37.4, 37.5, 37.6, 37.7, 37.8, 37.9, 38.0, 38.1, 38.2, 38.3, 38.4, 38.5, 38.6, 38.7, 38.8, 38.9, 39.0, 39.1, 39.2, 39.3, 39.4, 39.5, 39.6, 39.7, 39.8, 39.9, 40.0, 40.1, 40.2, 40.3, 40.4, 40.5, 40.6, 40.7, 40.8, 40.9, 41.0, 41.1, 41.2, 41.3, 41.4, 41.5, 41.6, 41.7, 41.8, 41.9, 42.0, 42.1, 42.2, 42.3, 42.4, 42.5, 42.6, 42.7, 42.8, 42.9, 43.0, 43.1, 43.2, 43.3, 43.4, 43.5, 43.6, 43.7, 43.8, 43.9, 44.0, 44.1, 44.2, 44.3, 44.4, 44.5, 44.6, 44.7, 44.8, 44.9, 45.0, 45.1, 45.2, 45.3, 45.4, 45.5, 45.6, 45.7, 45.8, 45.9, 46.0, 46.1, 46.2, 46.3, 46.4, 46.5, 46.6, 46.7, 46.8, 46.9, 47.0, 47.1, 47.2, 47.3, 47.4, 47.5, 47.6, 47.7, 47.8, 47.9, 48.0, 48.1, 48.2, 48.3, 48.4, 48.5, 48.6, 48.7, 48.8, 48.9, 49.0, 49.1, 49.2, 49.3, 49.4, 49.5, 49.6, 49.7, 49.8, 49.9, 50.0, 50.1, 50.2, 50.3, 50.4, 50.5, 50.6, 50.7, 50.8, 50.9, 51.0, 51.1, 51.2, 51.3, 51.4, 51.5, 51.6, 51.7, 51.8, 51.9, 52.0, 52.1, 52.2, 52.3, 52.4, 52.5, 52.6, 52.7, 52.8, 52.9, 53.0, 53.1, 53.2, 53.3, 53.4, 53.5, 53.6, 53.7, 53.8, 53.9, 54.0, 54.1, 54.2, 54.3, 54.4, 54.5, 54.6, 54.7, 54.8, 54.9, 55.0, 55.1, 55.2, 55.3, 55.4, 55.5, 55.6, 55.7, 55.8, 55.9, 56.0, 56.1, 56.2, 56.3, 56.4, 56.5, 56.6, 56.7, 56.8, 56.9, 57.0, 57.1, 57.2, 57.3, 57.4, 57.5, 57.6, 57.7, 57.8, 57.9, 58.0, 58.1, 58.2, 58.3, 58.4, 58.5, 58.6, 58.7, 58.8, 58.9, 59.0, 59.1, 59.2, 59.3, 59.4, 59.5, 59.6, 59.7, 59.8, 59.9, 60.0, 60.1, 60.2, 60.3, 60.4, 60.5, 60.6, 60.7, 60.8, 60.9, 61.0, 61.1, 61.2, 61.3, 61.4, 61.5, 61.6, 61.7, 61.8, 61.9, 62.0, 62.1, 62.2, 62.3, 62.4, 62.5, 62.6, 62.7, 62.8, 62.9, 63.0, 63.1, 63.2, 63.3, 63.4, 63.5, 63.6, 63.7, 63.8, 63.9, 64.0, 64.1, 64.2, 64.3, 64.4, 64.5, 64.6, 64.7, 64.8, 64.9, 65.0, 65.1, 65.2, 65.3, 65.4, 65.5, 65.6, 65.7, 65.8, 65.9, 66.0, 66.1, 66.2, 66.3, 66.4, 66.5, 66.6, 66.7, 66.8, 66.9, 67.0, 67.1, 67.2, 67.3, 67.4, 67.5, 67.6, 67.7, 67.8, 67.9, 68.0, 68.1, 68.2, 68.3, 68.4];
%waveform.y = [ -0.00723, -0.00346, 0.00513, 7.32e-4, -0.00492, 8.23e-4, 0.0083, -7.85e-5, -0.00601, -0.00473, -0.00536, -0.00383, 8.58e-4, 0.0136, 0.00792, -0.00941, -0.00543, 0.00341, -0.00498, 0.00234, 0.00423, -0.00211, 0.00688, 0.0064, -0.00491, 0.00299, 0.00228, -0.00648, -0.00405, 0.00288, -5.02e-4, -0.0039, 0.00216, 0.0053, 1.74e-4, -0.00217, 0.00324, 0.012, 0.00711, 0.00253, 0.00571, -0.00486, -0.00647, -0.0052, -0.00486, -0.00459, 4.52e-4, 0.00738, 7.95e-4, -0.0106, -0.00144, 0.00341, -0.00151, 0.0043, -3.47e-4, -0.0099, -9.74e-4, 0.00175, -0.00254, 3.03e-5, -0.00183, 0.00416, 1.26e-5, -0.0071, -0.00814, -0.00339, -0.00326, -0.00452, -0.00388, 0.00634, 0.00549, -0.00412, -0.00278, 0.00344, 0.00453, 2.55e-4, -9.6e-4, -8.45e-4, -0.00235, -1.48e-4, 0.0045, 0.00136, -0.00249, 0.00135, -0.00226, -0.00741, -0.0032, 1.57e-4, -0.0022, 0.0076, 0.00286, -0.00981, -0.00389, 0.00757, 0.00339, 0.00779, 0.00459, 0.00351, -0.00189, -0.00251, 0.00186, 0.0023, -0.00777, -0.00767, -0.00184, 0.00379, 5.73e-4, -0.00416, 0.00619, 0.00948, -0.00444, -0.00452, -2.77e-4, -0.00127, -0.00465, -0.0119, -0.00515, 0.00512, -0.00275, -0.00309, 0.00626, -0.00212, -0.00406, 9.51e-4, -0.00363, -0.00338, 0.00397, -0.00208, -5.54e-5, 0.00583, 0.00645, 2.52e-4, -0.00545, -0.00865, -1.06e-4, -0.00185, 0.0028, 0.00153, -0.0011, -0.00257, -7.21e-5, 0.00331, -0.0012, 0.004, 0.00713, 0.00249, -0.00717, -0.00145, 0.00344, -0.00305, 8.78e-4, 0.0048, -0.00713, -0.00557, 0.00497, -0.00559, -0.00885, 0.00411, -0.00579, 2.36e-4, 0.0111, -0.00211, -3.53e-4, 0.00559, -0.00872, -0.00532, 4.77e-4, -0.00174, -0.00252, -0.0029, 2.13e-4, 0.00192, 0.00216, 0.00792, -1.16e-4, -6.89e-4, 0.00266, 0.00544, 0.0019, -0.0017, -0.00117, 0.00868, 0.00665, 0.00224, 0.00796, 0.00471, 0.00288, 0.00184, -0.00317, -0.00831, -1.65e-5, 0.00798, -0.00111, 0.00713, 0.00779, -0.00909, -0.00691, -0.00213, -0.00155, -0.00123, -0.00247, 0.00232, 0.00172, -9.4e-4, 0.00854, 0.00967, -5.84e-4, 0.00249, 0.00194, -0.00407, 0.00174, 8.09e-4, 4.25e-5, -0.00177, -0.00463, 0.00334, 0.00317, -0.00705, -7.74e-4, -0.00568, -0.00783, 0.00315, 0.00382, -0.00592, -9.32e-4, 0.00523, 0.0078, 0.00646, -5.65e-4, -0.00251, 0.00121, -0.00187, -0.00168, -9.15e-4, -0.00448, -0.00388, -1.08e-4, 3.09e-5, -0.00393, -5.76e-4, 0.00611, 0.00746, 0.00354, 0.00187, 0.0025, 0.00232, 0.00306, -0.00177, -0.00176, 0.00137, 0.00223, -0.00463, -0.00689, -0.00586, -0.00664, -4.01e-4, 2.1e-4, -0.00331, -0.00207, 0.00326, 0.00525, 9.93e-4, 0.00515, 9.37e-4, -3.58e-4, 0.00404, -9.96e-4, -6.0e-4, 0.00166, -0.00533, -2.76e-4, 0.00247, -0.0011, -9.55e-4, 0.00511, 0.00578, 0.0041, 0.00332, 1.78e-4, -0.00678, -0.00703, 0.00602, 0.00421, -0.00273, -0.0034, -0.00384, 0.00371, 0.00815, -0.00697, 0.00231, 0.00426, -0.00624, 0.0087, 0.00834, -0.0023, 0.00708, 0.00606, -6.08e-4, 0.00259, 0.00634, 0.00273, -0.00378, 0.00188, -0.00205, -0.0123, -0.00444, 5.85e-4, 0.00103, 0.00286, 9.69e-4, -0.00363, 0.00171, 0.0101, 0.00155, -0.00235, 4.0e-4, -0.00594, -0.00548, 0.00147, 0.00132, 0.00124, 0.00592, 0.00633, 0.00488, 0.0147, 0.0217, 0.023, 0.0291, 0.0405, 0.0647, 0.0814, 0.104, 0.135, 0.168, 0.201, 0.24, 0.288, 0.337, 0.406, 0.49, 0.576, 0.669, 0.763, 0.835, 0.91, 0.973, 0.994, 1.0, 0.985, 0.952, 0.906, 0.848, 0.789, 0.723, 0.652, 0.587, 0.515, 0.44, 0.372, 0.293, 0.244, 0.201, 0.132, 0.0892, 0.0638, 0.0183, -0.00226, 8.73e-4, -0.0054, -0.00883, 7.15e-4, -0.0013, 0.00206, 0.0108, -0.00219, -0.00248, 0.00392, 0.00377, 0.00384, -4.03e-4, 3.82e-4, 0.0157, -0.00496, -0.00607, 0.00576, -0.00187, -6.39e-4, 0.00104, -6.27e-4, -0.00238, -0.00784, -0.0128, -0.00512, -0.00467, 2.71e-5, -0.00183, -0.00159, 0.00646, 0.0104, 0.0037, -0.01, 0.00484, -0.00223, -0.00677, 0.00168, 0.00201, 0.00148, -0.00797, 0.00506, -5.67e-4, -0.00491, 0.00393, -0.0056, 0.00157, 0.00228, -0.0109, -0.0115, -0.00463, 0.00356, 0.00761, -3.62e-4, -1.23e-4, 1.66e-4, -0.00186, -0.00166, -0.00219, 0.00795, -0.00842, 0.00245, 0.00118, 0.00209, -0.00299, 4.2e-4, 0.00529, 9.56e-5, -0.0045, -0.011, 0.00249, 0.00662, 2.68e-4, -0.00103, 0.00408, 0.00787, 0.00125, -0.0109, 0.00393, 0.00212, -3.08e-4, -0.00285, -2.72e-4, 0.00414, -0.00259, 0.00628, 0.00561, 1.44e-4, 0.0017, 0.00115, 0.00268, -0.00648, -0.00199, 0.0039, -0.0072, -0.00193, 0.00517, 6.36e-4, -5.77e-4, 0.00567, -0.00922, 0.00541, -0.00485, 0.00483, -9.56e-4, 0.00328, -0.00117, 0.0068, -0.00236, -0.00541, 0.00118, -0.00227, -0.00603, -0.00516, -0.00352, -0.00193, 0.00118, 0.00102, -3.62e-4, -0.01, 0.00361, -0.00268, -0.00134, -0.00722, 0.00482, 6.07e-4, 0.00326, -0.00457, -0.00347, 9.46e-5, -0.00129, -0.00908, -0.00431, -0.00484, 0.0121, -0.0018, -0.00579, -0.00141, 0.00524, -0.00441, -0.00554, 0.00258, -0.00496, 4.35e-4, 0.00548, -0.00209, 0.00608, -0.00205, -0.00753, -0.0022, 0.00254, -0.00933, -0.00381, -7.82e-4, -3.99e-4, -0.00129, -8.38e-4, -0.0077, -0.0097, 0.0015, 0.00837, 1.71e-4, 0.00184, -0.00483, -0.00677, -0.00265, -0.00232, -0.00799, -0.00504, 0.00129, -0.00267, -0.00343, 0.00212, -0.00153, -1.16e-4, -0.00459, -0.0123, -0.00941, 0.00323, 0.00444, 0.00317, -0.00845, -0.0104, 0.0113, -0.00262, 0.0159, 0.00257, 0.0103, -0.00134, 0.00101, 1.6e-4, -0.00135, 0.00577, -0.00117, -0.00159, 0.00371, -0.00135, -0.0106, -0.00538, 6.35e-4, -0.00592, 0.00231, -0.00732, 0.00592, 0.00194, 0.00403, -0.00473, -0.00177, 0.0036, 0.00153, -0.00243, 0.00422, 0.00272, 0.00138, -0.00755, 0.00147, 0.00545, 0.0038, -0.00352, 0.00294, 0.00849, -0.00325, -0.0055, -9.46e-4, -0.0023, -0.00367, -0.00221, 8.21e-4, -9.62e-4, 0.00288, -0.00104, 0.012, -2.79e-4, 0.00422, -0.0061, -0.00406, 0.00358, 0.00363, 9.97e-4, 0.0074, 0.00116, -0.00136, 0.00274, -0.00263, -0.00434, 0.00192, 0.00257, -0.00311, -0.00145, 8.2e-4, 0.00859, 0.00691, 0.00121, -0.00593, 6.33e-4, -0.0028, 0.00151, 0.00431, 1.16e-4, -4.12e-4, -0.00548, 0.00407, 0.00313, -0.00143, -0.00649, 0.00461, -0.00449, -0.0051, 0.00413, 0.00298, -1.74e-4, -0.00257, -2.77e-4, 0.00309, -8.93e-5, 0.00505, -0.0022, -0.00267, -0.0152, 0.0035, 0.00829, -0.00397, 0.00379, 0.00389, 0.00131, -0.00896, 0.00464, 0.00712, -0.00149, -0.00577, 0.00791, 0.00614, 0.00223, -0.00356, 0.00151, 9.59e-4, -0.00665, -0.00521, -0.0168, -8.24e-4, 0.00394, 0.00151, -0.00466, -0.00417, 0.00655, 0.00517, 0.00674, -0.00356, 0.00173, 0.00428, 0.00267, -0.00692, -6.86e-4, 0.0169, 0.00183, -0.00138, 0.0116, -0.00389, -0.00424, -7.83e-4, 0.00299, -0.00757, -0.00606, 2.6e-4, 0.00291, -0.0071, 0.00427, 0.00384, -0.00917, -0.00322, -0.0083, 9.94e-4, -2.68e-4, 0.00251, 1.5e-4, -0.00117, 0.00344, 0.00144, 0.00278, 9.61e-4, 0.0063, -0.00274, 0.00446, 0.0034, -0.00554, -0.00233, 0.00296, 0.00332, -6.15e-4, 0.00196, -0.00317, 0.00848, -0.00333, 0.00979, 0.00618, 3.93e-4, 0.00403, -0.00546, -0.0028, -0.00625, 0.00325, 0.00276, -0.0027, -0.00188, 0.00281, -0.00527, -0.00127, -0.00312, -0.00112, -7.5e-4, -0.00386, -0.00277, -0.00297, -0.00158, -0.00183, -0.00188, -0.00356, -0.00833, 2.64e-4, 0.00393, -0.00614, 0.00135, 5.09e-4, -0.00297, -0.00849, 0.0038, -0.00445, -0.00592, 0.00222, -3.2e-4, -0.00545, 0.00123, -0.00952, 0.00371, 0.00129, -7.49e-4, -0.00407, 9.48e-4, 0.00409, -0.00475, 0.00485, -0.00344, 0.00215, 0.0037, -0.00384, 1.35e-4, -3.13e-4, 8.62e-4, -0.00397, 0.00592, -0.00454, -0.00173, 0.00131, -0.00338, 0.00414, 0.00722, 0.00342, 4.12e-4, 0.00532, 0.00436, -1.51e-4, 7.45e-4, 0.00869, -0.00958, -0.00702, -0.00241, -4.4e-4, 0.0035, 0.00575, 0.00185, -0.00552, -0.00288, 0.0054, -0.00458, 0.00392, 0.00634, -0.00426, 0.00697, 0.00248, -7.4e-4, 0.00724, -0.00162, -0.00547, -0.00248, 0.0017, 0.00215, -0.00536, -0.00502, 0.00285, 0.001, -0.0101, 0.00366, 0.00255, -0.00898, 0.00546, 0.00435, -0.00339, 8.9e-5, 0.0065, 0.00472, 0.00556, -0.00278, 1.26e-4, 4.07e-4, 0.00544, 0.00618, 0.00524, -0.0015, -6.28e-4, -0.00752, -0.00121, -0.00448, 0.00347, -0.00403, -7.67e-4, -0.00606, -0.0079, 0.00208, -0.0046, 0.00278, -0.00602, -0.00322, 1.56e-4, 0.00174, 6.2e-4, -0.00927, -0.0122, 0.00576, -0.0058, -0.00562, -0.00571, -0.00244, 0.00243, 4.32e-4, 0.00409, -5.15e-4, 0.00698, 0.00612, -3.16e-4, -0.0034, -0.00174, -0.0025, 0.00145, 0.00248, 0.00319, 0.00139, 0.00955, 8.85e-4, 0.00293, -0.00456, 0.01, 0.00227, -1.19e-5, -0.00107, -0.00214, 0.00676, -0.00507, 0.0041, -0.00532, -0.00864, -0.00954, 0.00503, 0.00315, 2.04e-4, 0.00224, 5.63e-4, 0.00876, 0.0015, 0.00304, -0.00573, 0.00307, -0.0091, 0.00488, 0.00313, -0.00336, 0.0024, -0.00768, 0.00769, -0.00826, 0.0016, -0.00794, 0.00381, -0.00288, 0.00163, 0.00931, 0.00149, -0.0106, -0.00523, -0.00515, -0.00495, 3.78e-4, 0.00677, 0.00563, -8.0e-4, -0.0111, -0.00104, -0.00295, 0.00526, 0.00145, -0.00412, 0.00204, -0.00416, 0.00658, 0.00483, 0.00259, 9.03e-4, 9.2e-4, -0.0102, -0.00233, 0.00347, -0.00351, -0.00769, 0.00232, 6.04e-4, -0.00748, 0.00368, -0.00362, 0.0059, 0.00199, 8.79e-4, -9.81e-4, 0.00286, -0.00214, 0.00332, -0.00493, -0.00652, -0.0023, -0.00118, 0.00455, 0.00413, 1.54e-4, -0.00865, 0.00181, 8.51e-4, -0.00542, 2.6e-4, -0.00186, -8.73e-4, -0.00484, 0.00114, 0.00294, -0.00276, 0.00268, -0.0034, -0.00139, 0.0214, 0.0111, -0.00203, 0.00374, 0.00226, -0.00495, 0.00156, 0.00135, -0.00344, 0.0018, -0.00401, 0.0148, 0.00461, -1.94e-4, -0.0019, 0.00739, -0.00429, 0.00818, -3.81e-5, 0.00371, -0.0025, -0.00281, 1.67e-4, -0.00442, 1.45e-4, -0.00125, 0.00283, 0.00803, -8.85e-4, 0.0044, 3.3e-6, -0.00574, 1.93e-4, -0.00682, 0.00556, -0.00803, 0.00133, -9.44e-4, -0.0012, 0.00551, 0.00219, 0.00596, 5.19e-4, -0.00307, -0.0064, 1.36e-5, -0.00554, -0.00147, -0.00453, 0.0022, -0.00427, 0.00843, 0.00623, -5.1e-4, -0.00106, 7.76e-4, 0.00212, 0.00314, -0.00443, 0.004];
waveform.y
%y = max(y,0); %prevent negative
%y(x>1.8) = randn(sum(x>1.8),1)*.005;
end
